/**
 * Sizing utilities
 */

// scss-lint:disable PlaceholderInExtend

/* Intrinsic widths
   ========================================================================== */

@mixin intrinsic-widths($namespace: "") {

  /**
   * Make an element shrink wrap its content.
   */

  .u-#{$namespace}widthFit {
    display: block !important;
    float: left !important;
    width: auto !important;
  }

  .u-#{$namespace}widthFitAlt {
    // scss-lint:disable NameFormat
    @extend .u-#{$namespace}widthFit;
    // scss-lint:enable NameFormat
    float: right !important;
  }

  /**
   * Make an element fill the remaining space.
   * N.B. This will hide overflow.
   */

  .u-#{$namespace}widthFill {
    display: table-cell !important;
    max-width: 100% !important;
    width: 10000px !important;
  }

  /**
   * An alternative method to make an element fill the remaining space.
   * N.B. Do not use if child elements might be wider than the remaining space.
   * In Chrome, Safari, and Firefox it results in undesired layout.
   */

  .u-#{$namespace}widthFillAlt {
    display: table-cell !important;
    max-width: 100% !important;
    width: 10000px !important;
  }

  /**
   * Make an element the width of its parent.
   */

  .u-#{$namespace}widthFull {
    box-sizing: border-box !important;
    display: block !important;
    width: 100% !important;
  }
}

@include intrinsic-widths();

@media #{$mobile-only} {
  @include intrinsic-widths("sm-");
}

@media #{$tablet-only} {
  @include intrinsic-widths("md-");
}

@media #{$desktop-up} {
  @include intrinsic-widths("lg-");
}

/* Proportional widths
   ========================================================================== */

/**
 * Specify the proportional width of an object.
 * Intentional redundancy build into each set of unit classes.
 * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
 */

/*------------------------------------*\
  $WIDTHS
\*------------------------------------*/
/**
 * Sizes in human readable format. These are used in conjunction with other
 * objects and abstractions found in inuit.css, most commonly the grid system
 * and faux flexbox.
 *
 * We have a mixin to generate our widths and their breakpoint-specific
 * variations.
 */

@mixin grid-setup($namespace: "") {

  // Whole
  .u-#{$namespace}width1of1 { width: 100%; }

  // Halves
  .u-#{$namespace}width1of2 { width: calc(100% * 1 / 2) !important; }
  .u-#{$namespace}width2of2 { @extend .u-#{$namespace}width1of1; }

  // Thirds
  .u-#{$namespace}width1of3 { width: calc(100% * 1 / 3) !important; }
  .u-#{$namespace}width2of3 { width: calc(100% * 2 / 3) !important; }
  .u-#{$namespace}width3of3 { @extend .u-#{$namespace}width1of1; }

  // Quarters
  .u-#{$namespace}width1of4 { width: calc(100% * 1 / 4) !important; }
  .u-#{$namespace}width2of4 { @extend .u-#{$namespace}width1of2; }
  .u-#{$namespace}width3of4 { width: calc(100% * 3 / 4) !important; }
  .u-#{$namespace}width4of4 { @extend .u-#{$namespace}width1of1; }

  // Sixths
  .u-#{$namespace}width1of6 { width: calc(100% * 1 / 6) !important; }
  .u-#{$namespace}width2of6 { @extend .u-#{$namespace}width1of3; }
  .u-#{$namespace}width3of6 { @extend .u-#{$namespace}width1of2; }
  .u-#{$namespace}width4of6 { @extend .u-#{$namespace}width2of3; }
  .u-#{$namespace}width5of6 { width: calc(100% * 5 / 6) !important; }
  .u-#{$namespace}width6of6 { @extend .u-#{$namespace}width1of1; }

  // Twelfths
  .u-#{$namespace}width1of12 { width: calc(100% * 1 / 12) !important; }
  .u-#{$namespace}width2of12 { @extend .u-#{$namespace}width1of6; }
  .u-#{$namespace}width3of12 { @extend .u-#{$namespace}width1of4; }
  .u-#{$namespace}width4of12 { @extend .u-#{$namespace}width1of3; }
  .u-#{$namespace}width5of12 { width: calc(100% * 5 / 12) !important; }
  .u-#{$namespace}width6of12 { @extend .u-#{$namespace}width1of2; }
  .u-#{$namespace}width7of12 { width: calc(100% * 7 / 12) !important; }
  .u-#{$namespace}width8of12 { @extend .u-#{$namespace}width2of3; }
  .u-#{$namespace}width9of12 { @extend .u-#{$namespace}width3of4; }
  .u-#{$namespace}width10of12 { @extend .u-#{$namespace}width5of6; }
  .u-#{$namespace}width11of12 { width: calc(100% * 11 / 12) !important; }
  .u-#{$namespace}width12of12 { @extend .u-#{$namespace}width1of1; }
}

@include grid-setup();

@media #{$mobile-only} {
  @include grid-setup("sm-");
}

@media #{$tablet-only} {
  @include grid-setup("md-");
}

@media #{$desktop-up} {
  @include grid-setup("lg-");
}
